{"version":3,"sources":["utils/API.js","pages/Search.js","App.js","registerServiceWorker.js","index.js"],"names":["q","axios","get","params","bookData","post","Search","state","books","search","handleInputChange","event","target","name","value","setState","getBooks","API","then","res","data","catch","handleFormSubmit","preventDefault","handleSaveBook","id","book","find","googleId","title","volumeInfo","authors","description","image","link","Container","component","maxWidth","CssBaseline","className","classes","paper","Avatar","avatar","Typography","variant","form","noValidate","TextField","margin","required","fullWidth","label","autoFocus","onChange","Button","onClick","color","submit","Component","withStyles","theme","marginTop","spacing","display","flexDirection","alignItems","backgroundColor","palette","secondary","main","width","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6SAEe,EACH,SAASA,GACjB,OAAOC,IAAMC,IAAI,cAAe,CAAEC,OAAQ,CAAEH,EAAG,SAAWA,MAF/C,EAUH,SAASI,GACjB,OAAOH,IAAMI,KAAK,aAAcD,I,QCsB9BE,E,4MACJC,MAAQ,CACNC,MAAO,GACPC,OAAQ,I,EAGVC,kBAAoB,SAAAC,GAClB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,EAAKC,SAAL,eACGF,EAAOC,K,EAIZE,SAAW,WACTC,EAAa,EAAKV,MAAME,QACvBS,MAAK,SAACC,GAAD,OAAS,EAAKJ,SAAS,CAC3BP,MAAOW,EAAIC,UAEXC,OAAM,kBACR,EAAKN,SAAS,CACZP,MAAO,S,EAKXc,iBAAmB,SAAAX,GACjBA,EAAMY,iBACN,EAAKP,Y,EAGPQ,eAAiB,SAAAC,GACf,IAAMC,EAAO,EAAKnB,MAAMC,MAAMmB,MAAK,SAACD,GAAD,OAAUA,EAAKD,KAAOA,KAEzDR,EAAa,CACXW,SAAUF,EAAKD,GACfI,MAAOH,EAAKI,WAAWD,MACvBE,QAASL,EAAKI,WAAWC,QACzBC,YAAaN,EAAKI,WAAWE,YAC7BC,MAAOP,EAAKI,WAAWG,MACvBC,KAAMR,EAAKI,WAAWI,OACrBhB,MAAK,kBAAM,EAAKF,e,4CAGrB,WACE,OACA,eAACmB,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,UACA,cAACC,EAAA,EAAD,IACA,sBAAKC,UAAWC,QAAQC,MAAxB,UACI,cAACC,EAAA,EAAD,CAAQH,UAAWC,QAAQG,OAA3B,SACA,cAAC,IAAD,MAEA,cAACC,EAAA,EAAD,CAAYR,UAAU,KAAKS,QAAQ,KAAnC,gCAGA,uBAAMN,UAAWC,QAAQM,KAAMC,YAAU,EAAzC,UACA,cAACC,EAAA,EAAD,CACIH,QAAQ,WACRI,OAAO,SACPC,UAAQ,EACRC,WAAS,EACT1B,GAAG,SACH2B,MAAM,YACNvC,KAAK,SAELwC,WAAS,EACTC,SAAU5C,oBAEd,cAAC6C,EAAA,EAAD,CACIC,QAASlC,iBACT6B,WAAS,EACTN,QAAQ,YACRY,MAAM,UACNlB,UAAWC,QAAQkB,OALvB,iC,GAnEaC,aAiHNC,eArIA,SAACC,GAAD,MAAY,CACvBpB,MAAO,CACHqB,UAAWD,EAAME,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBvB,OAAQ,CACJM,OAAQY,EAAME,QAAQ,GACtBI,gBAAiBN,EAAMO,QAAQC,UAAUC,MAE7CxB,KAAM,CACFyB,MAAO,OACPT,UAAWD,EAAME,QAAQ,IAE7BL,OAAQ,CACJT,OAAQY,EAAME,QAAQ,EAAG,EAAG,OAqHrBH,CAAmBtD,GChInBkE,MAdf,WACE,OACE,cAAC,IAAD,UACE,8BAEE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAItC,UAAW9B,WCFrCqE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACThE,MAAK,SAAAoE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjF,QACf4E,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBxE,OAAM,SAAAyE,GACLF,QAAQE,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,GAAN,sBAENzB,EAwCX,SAAiCO,GAE/BqB,MAAMrB,GACHhE,MAAK,SAAAsF,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQxG,IAAI,gBAAgByG,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAM1F,MAAK,SAAAoE,GACjCA,EAAauB,aAAa3F,MAAK,WAC7B2D,OAAOC,SAASgC,eAKpB7B,EAAgBC,MAGnB7D,OAAM,WACLuE,QAAQC,IACN,oEAzDAkB,CAAwB7B,GAHxBD,EAAgBC,OC7BxB8B,I","file":"static/js/main.fea0de62.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  getBooks: function(q) {\n    return axios.get(\"/api/google\", { params: { q: \"title:\" + q } });\n  },\n  getSavedBooks: function() {\n    return axios.get(\"/api/books\");\n  },\n  deleteBook: function(id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  saveBook: function(bookData) {\n    return axios.post(\"/api/books\", bookData);\n  }\n};\n","import React, { Component } from \"react\";\n// import { useParams } from \"react-router-dom\";\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\n// import Link from '@material-ui/core/Link';\n// import Grid from '@material-ui/core/Grid';\n// import Box from '@material-ui/core/Box';\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport API from \"../utils/API\";\n\nconst styles = (theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n});\n\nclass Search extends Component {\n  state = {\n    books: [],\n    search: \"\",\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  getBooks = () => {\n    API.getBooks(this.state.search)\n    .then((res) => this.setState({\n      books: res.data\n    })\n    ).catch(() => \n    this.setState({\n      books: []\n    })\n    );\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.getBooks();\n  };\n\n  handleSaveBook = id => {\n    const book = this.state.books.find((book) => book.id === id);\n\n    API.saveBook({\n      googleId: book.id,\n      title: book.volumeInfo.title,\n      authors: book.volumeInfo.authors,\n      description: book.volumeInfo.description,\n      image: book.volumeInfo.image,\n      link: book.volumeInfo.link\n    }).then(() => this.getBooks());\n  };\n\n  render() {\n    return (\n    <Container component=\"main\" maxWidth=\"xs\">\n    <CssBaseline />\n    <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n        <MenuBookIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n       Search for a book!\n        </Typography>\n        <form className={classes.form} noValidate>\n        <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"search\"\n            label=\"Search...\"\n            name=\"search\"\n            // autoComplete=\"Book\"\n            autoFocus\n            onChange={handleInputChange}\n        />\n        <Button\n            onClick={handleFormSubmit}\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n        >\n            Search\n        </Button>\n        </form>\n    </div>\n    {/* <Row>\n      <Col size=\"md-12\">\n        <Card title=\"Results\">\n          {this.state.books.length ? (\n            <List>\n              {this.state.books.map(book => (\n                <Book\n                  key={book.id}\n                  title={book.volumeInfo.title}\n                  subtitle={book.volumeInfo.subtitle}\n                  link={book.volumeInfo.infoLink}\n                  authors={book.volumeInfo.authors.join(\", \")}\n                  description={book.volumeInfo.description}\n                  image={book.volumeInfo.imageLinks.thumbnail}\n                  Button={() => (\n                    <button\n                      onClick={() => this.handleBookSave(book.id)}\n                      className=\"btn btn-primary ml-2\"\n                    >\n                      Save\n                    </button>\n                  )}\n                />\n              ))}\n            </List>\n          ) : (\n            <h2 className=\"text-center\">{this.state.message}</h2>\n          )}\n        </Card>\n      </Col>\n    </Row> */}\n    </Container>\n    );\n  }\n}\nexport default withStyles(styles)(Search);\n\n// function Search() {\n//     const [formObject, setFormObject] = useState({});\n//     // const [books, setBooks] = useState({res.data});\n//     const classes = useStyles();\n//     const [books, setBooks] = useState([]);\n//     const [q, setQ] = useState(\"\");\n\n//     useEffect(() => {\n//       getSearchedBooks();\n//     }, []);\n  \n//     function handleInputChange(event) {\n//       const { name, value } = event.target;\n//       setFormObject({...formObject, [name]: value})\n//     };\n  \n//     async function handleFormSubmit(event) {\n//       event.preventDefault();\n//       getSearchedBooks();\n//     };\n\n//     const getSearchedBooks = () => {\n//       API.getBooks(q).then((res) => {\n//         books = res.data;\n//         console.log('hello');\n//         console.log(books);\n//         setBooks(() => books);\n//       })\n//       .catch(err => console.log(err));\n//     };\n\n    // // add message if no books are found \n    // // const {id} = useParams()\n    // useEffect(() => {\n    //   API.saveBook({\n    //     googleId: book.id,\n    //     title: book.volumeInfo.title,\n    //     authors: book.volumeInfo.authors,\n    //     description: book.volumeInfo.description,\n    //     image: book.volumeInfo.image,\n    //     link: book.volumeInfo.link\n    //   }).then((res) => getSearchedBooks())\n    // })\n\n    // const saveSearchedBook = (id) => {\n    //   const book = \n    // }\n    \n    \n      // handleBookSave = id => {\n      //   const book = this.state.books.find(book => book.id === id);\n    \n      //   API.saveBook({\n      //     googleId: book.id,\n      //     title: book.volumeInfo.title,\n      //     subtitle: book.volumeInfo.subtitle,\n      //     link: book.volumeInfo.infoLink,\n      //     authors: book.volumeInfo.authors,\n      //     description: book.volumeInfo.description,\n      //     image: book.volumeInfo.imageLinks.thumbnail\n      //   }).then(() => this.getBooks());\n      // };\n\n    // BREAK // \n    \n  //   return (\n  //       <Container component=\"main\" maxWidth=\"xs\">\n  //       <CssBaseline />\n  //       <div className={classes.paper}>\n  //           <Avatar className={classes.avatar}>\n  //           <MenuBookIcon />\n  //           </Avatar>\n  //           <Typography component=\"h1\" variant=\"h5\">\n  //          Search for a book!\n  //           </Typography>\n  //           <form className={classes.form} noValidate>\n  //           <TextField\n  //               variant=\"outlined\"\n  //               margin=\"normal\"\n  //               required\n  //               fullWidth\n  //               id=\"search\"\n  //               label=\"Search...\"\n  //               name=\"search\"\n  //               // autoComplete=\"Book\"\n  //               autoFocus\n  //               onChange={handleInputChange}\n  //           />\n  //           <Button\n  //               onClick={handleFormSubmit}\n  //               fullWidth\n  //               variant=\"contained\"\n  //               color=\"primary\"\n  //               className={classes.submit}\n  //           >\n  //               Search\n  //           </Button>\n  //           </form>\n  //       </div>\n  //       {/* <Row>\n  //         <Col size=\"md-12\">\n  //           <Card title=\"Results\">\n  //             {this.state.books.length ? (\n  //               <List>\n  //                 {this.state.books.map(book => (\n  //                   <Book\n  //                     key={book.id}\n  //                     title={book.volumeInfo.title}\n  //                     subtitle={book.volumeInfo.subtitle}\n  //                     link={book.volumeInfo.infoLink}\n  //                     authors={book.volumeInfo.authors.join(\", \")}\n  //                     description={book.volumeInfo.description}\n  //                     image={book.volumeInfo.imageLinks.thumbnail}\n  //                     Button={() => (\n  //                       <button\n  //                         onClick={() => this.handleBookSave(book.id)}\n  //                         className=\"btn btn-primary ml-2\"\n  //                       >\n  //                         Save\n  //                       </button>\n  //                     )}\n  //                   />\n  //                 ))}\n  //               </List>\n  //             ) : (\n  //               <h2 className=\"text-center\">{this.state.message}</h2>\n  //             )}\n  //           </Card>\n  //         </Col>\n  //       </Row> */}\n  //       </Container>\n  //   );\n  // }\n  \n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// import Saved from \"./pages/Saved\";\nimport Search from \"./pages/Search\";\n// import Nav from \"./components/Nav\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        {/* <Nav /> */}\n        <Switch>\n          <Route exact path=\"/\" component={Search} />\n          {/* <Route exact path=\"/saved\" component={Saved} /> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}